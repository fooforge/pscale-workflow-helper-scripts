name: Merge associated PlanetScale deploy request

on:
  issue_comment:
    types: [created]

jobs:
  prechecks:
    name: Permission pre-check
    if: github.event.issue.pull_request != null && startsWith(github.event.comment.body, '/ps-merge')
    outputs:
      ref: ${{steps.prechecks.outputs.ref}}
      eyes: ${{steps.prechecks.outputs.eyes}}
    runs-on: ubuntu-latest
    steps:
    - name: Check permissions and PR ref
      id: prechecks
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const reactionRes = await github.reactions.createForIssueComment({
            ...context.repo,
            comment_id: ${{github.event.comment.id}},
            content: 'eyes'
          })

          core.setOutput('eyes', reactionRes.data.id)

          const permissionRes = await github.repos.getCollaboratorPermissionLevel(
            {
              ...context.repo,
              username: context.actor
            }
          )
          if (permissionRes.status !== 200) {
            message = 'Permission check returns non-200 status: ${permissionRes.status}'
            core.setOutput('error', message)
            throw new Error(message)
          }
          const actorPermission = permissionRes.data.permission
          if (!['admin', 'write'].includes(actorPermission)) {
              message = 'ðŸ‘‹  __' + context.actor + '__, seems as if you have not admin/write permission to /ps-merge this DR, permissions: ${actorPermission}'
              core.setOutput('error', message)
              throw new Error(message)
          }

          pr = await github.pulls.get(
            {
              ...context.repo,
              pull_number: context.issue.number
            }
          )

          if (pr.status !== 200) {
            message = 'Could not retrieve PR info: ${permissionRes.status}'
            core.setOutput('error', message)
            throw new Error(message)
          }

          core.setOutput('ref', pr.data.head.ref)

    - name: Pre-Check-Failed
      id: precheck-failed
      if: failure()
      uses: actions/github-script@v3
      env:
        message: ${{steps.prechecks.outputs.error}}
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const { message } = process.env;
          github.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body: message
          })

          await github.reactions.createForIssueComment({
            ...context.repo,
            comment_id: ${{github.event.comment.id}},
            content: '-1'
          })

          await github.reactions.deleteForIssueComment({
            ...context.repo,
            comment_id: ${{github.event.comment.id}},
            reaction_id: ${{steps.prechecks.outputs.eyes}}
          })


  act-on-ps-merge-request:
      name: "Merge DR - click here ..."
      needs: [prechecks]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2
          with:
            ref: ${{ needs.prechecks.outputs.ref }}

        - name: Get associated PlanetScale env
          id: get-ps-env
          env:
            REF: ${{ needs.prechecks.outputs.ref }}
          run: ./ps-env-${REF}.sh
            
        - name: Acknowledge /ps-merge request with context
          id: acknowledge
          env:
            DEPLOY_REQUEST_URL: ${{ steps.get-ps-env.outputs.DEPLOY_REQUEST_URL }}
            BRANCH_NAME: ${{ steps.get-ps-env.outputs.BRANCH_NAME }}
            BRANCH_URL: ${{ steps.get-ps-env.outputs.BRANCH_URL }}
            DB_NAME: ${{ steps.get-ps-env.outputs.DB_NAME }}
            ORG_NAME: ${{ steps.get-ps-env.outputs.ORG_NAME }}
            REF: ${{ needs.prechecks.outputs.ref }}
          uses: actions/github-script@v3
          with:
            github-token: ${{secrets.GITHUB_TOKEN}}
            script: |
              const { DEPLOY_REQUEST_URL, BRANCH_NAME, BRANCH_URL, DB_NAME, ORG_NAME, REF } = process.env;
              const log_url = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`

              const commentBody = `\
              ðŸ‘‹ __${context.actor}__, trying to [merge](${DEPLOY_REQUEST_URL}) schema changes associated with database branch [\`${BRANCH_NAME}\`](${BRANCH_URL}) now ...
              
              You can watch the progress and authorize access [here](${log_url}).
              `;

              await github.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: commentBody
              })

              deployment = await github.repos.createDeployment({
                ...context.repo,
                ref: REF,
                task: 'merge-db-schema-change',
                auto_merge: false,
                required_contexts: [],
                environment:  ORG_NAME + '/' + DB_NAME + '/' + BRANCH_NAME,
                description: 'Schema changes for database branch ' + BRANCH_NAME,
                payload:  { DB_NAME: DB_NAME, ORG_NAME: ORG_NAME, DEPLOY_REQUEST_URL: DEPLOY_REQUEST_URL, BRANCH_NAME: BRANCH_NAME},
                production_environment: false,
                transient_environment: false
              });

              core.setOutput('deployment_id', deployment.data.id)

              github.repos.createDeploymentStatus({
                mediaType: {
                  previews: ["flash-preview", "ant-man"]
                },
                ...context.repo,
                deployment_id: deployment.data.id,
                state: 'in_progress',
                description: 'Merging schema changes on branch ' + BRANCH_NAME + ' ...',
                environment_url: DEPLOY_REQUEST_URL,
                log_url: log_url
              })
            
        - name: Merging schema changes - if asked, please click on displayed link to authenticate
          id: merge-dr
          timeout-minutes: 10
          env:
            PLANETSCALE_SERVICE_TOKEN_NAME: ${{secrets.PLANETSCALE_SERVICE_TOKEN_NAME}}
            PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
            GITHUB_USER: ${{github.actor}}
            REF: ${{ needs.prechecks.outputs.ref }}

          run: |
            . ps-env-${REF}.sh && ./merge-deploy-request.sh $DEPLOY_REQUEST_NUMBER

        - name: Schema change merge succeeded
          id: merging-succeeded
          if: success()
          uses: actions/github-script@v3
          env:
            DEPLOY_REQUEST_URL: ${{ steps.get-ps-env.outputs.DEPLOY_REQUEST_URL }}
            BRANCH_NAME: ${{ steps.get-ps-env.outputs.BRANCH_NAME }}
            BRANCH_URL: ${{ steps.get-ps-env.outputs.BRANCH_URL }}
            DB_NAME: ${{ steps.get-ps-env.outputs.DB_NAME }}
            ORG_NAME: ${{ steps.get-ps-env.outputs.ORG_NAME }}
            deployment_id: ${{ steps.acknowledge.outputs.deployment_id }}
            BRANCH_DIFF: ${{ steps.merge-dr.outputs.BRANCH_DIFF }}
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const { DEPLOY_REQUEST_URL, BRANCH_NAME, BRANCH_URL, DB_NAME, ORG_NAME, deployment_id, BRANCH_DIFF } = process.env;
              const log_url = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`
              github.repos.createDeploymentStatus({
                ...context.repo,
                deployment_id: deployment_id,
                state: 'success',
                description: 'Schema changes merged successfully from branch ' + BRANCH_NAME + ' :tada:',
                target_url: DEPLOY_REQUEST_URL,
                log_url: log_url
              })
          
              const commentBody = `\
              ### Schema changes merged successfully :tada:

              * :seedling: __DB-Branch__: [${BRANCH_NAME}](${BRANCH_URL})
              * :train2: [Deploy request](${DEPLOY_REQUEST_URL})

              <details>
              <summary>ðŸš€ Schema changes applied</summary>
              
              \`\`\`
              ${BRANCH_DIFF}
              \`\`\`

              </details>
              
              `;
              
              github.issues.createComment({
                ...context.repo,
                issue_number: ${{ github.event.issue.number }},
                body: commentBody
              });

              await github.reactions.createForIssueComment({
                ...context.repo,
                comment_id: ${{github.event.comment.id}},
                content: '+1'
              })

              await github.reactions.deleteForIssueComment({
                ...context.repo,
                comment_id: ${{github.event.comment.id}},
                reaction_id: ${{needs.prechecks.outputs.eyes}}
              })

        - name: Merging schema change failed
          id: merging-failed
          if: cancelled() || failure()
          uses: actions/github-script@v3
          env:
            DEPLOY_REQUEST_URL: ${{ steps.get-ps-env.outputs.DEPLOY_REQUEST_URL }}
            BRANCH_NAME: ${{ steps.get-ps-env.outputs.BRANCH_NAME }}
            BRANCH_URL: ${{ steps.get-ps-env.outputs.BRANCH_URL }}
            DB_NAME: ${{ steps.get-ps-env.outputs.DB_NAME }}
            ORG_NAME: ${{ steps.get-ps-env.outputs.ORG_NAME }}
            deployment_id: ${{ steps.acknowledge.outputs.deployment_id }}
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const { DEPLOY_REQUEST_URL, BRANCH_NAME, BRANCH_URL, DB_NAME, ORG_NAME, deployment_id } = process.env;
              const log_url = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`
              github.repos.createDeploymentStatus({
                ...context.repo,
                deployment_id: deployment_id,
                state: 'failure',
                description: 'Merging schema change failed for branch ' + BRANCH_NAME + ' :cry:',
                environment_url: DEPLOY_REQUEST_URL,
                log_url: log_url
              })

              github.issues.createComment({
                ...context.repo,
                issue_number: ${{ github.event.issue.number }},
                body: `Merging schema change failed for branch [${BRANCH_NAME}](${BRANCH_URL}) :cry:. [View error logs](${log_url}).`
              })

              await github.reactions.createForIssueComment({
                ...context.repo,
                comment_id: ${{github.event.comment.id}},
                content: '-1'
              })

              await github.reactions.deleteForIssueComment({
                ...context.repo,
                comment_id: ${{github.event.comment.id}},
                reaction_id: ${{needs.prechecks.outputs.eyes}}
              })
